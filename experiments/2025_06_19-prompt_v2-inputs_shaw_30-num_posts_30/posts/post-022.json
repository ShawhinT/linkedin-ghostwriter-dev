{
  "input": "Managing technical debt when coding with AI. 2 things I consider. 1) my experience with the lang/library and 2) how many times I need to run project.",
  "writing_steps": "Step 1: Purpose and Audience\n- Purpose: Educate on managing technical debt in AI-enabled coding, and share a personal framework for deciding when to move quickly vs. build robustly.\n- Audience: Developers, AI engineers, and technical founders (especially those building prototypes or shipping AI projects).\n\nStep 2: Wireframe\n[Hook — common frustration around messy code when using AI]\n[2 key considerations: experience with the tech, and how often the code is run]\n[Short, clear breakdown]\n[End with a question: How do others approach technical debt?]\n\nStep 3: Body\n- Everyone loves using AI to move fast, but messy code piles up quickly.\n- I keep it simple with 2 core questions:\n    1. How well do I know the language or library? (If I’m fluent, I naturally write better code. If not, I’m okay with rough drafts to validate ideas.)\n    2. How often will I need to run or maintain this project? (One-time script? Ugly but fast is fine. Daily job? Needs more structure upfront.)\n- This helps me balance shipping quickly vs. getting stuck polishing code that won’t matter.\n\nStep 4: CTA/Question\nWhat do you think about when deciding how much \"cleanup\" is needed?\n\nStep 5: Hooks - Brainstorm Directions\n[Problem/solution] \"AI lets you move fast, but that doesn't mean you can ignore technical debt.\"\n[Personal story] \"After breaking too many things, I stopped overthinking technical debt and just started asking myself two simple questions.\"\n[Beginner-to-expert clarity] \"Unsure when to worry about technical debt? Here’s my quick litmus test.\"\n[User’s own phrasing] \"2 things I consider before coding with AI.\"\n[Trend/urgency] \"With AI tools, code gets messy—fast. But you don’t have to choose between speed and sanity.\"\n\nStep 5B: Notes for Each\n- Problem/solution: Tension between fast prototyping and future headaches\n- Personal story: Frustration, simple personal rule emerged\n- Beginner/expert: Clarity for newcomers, actionable filter\n- User phrasing: Keep to their direct, simple framing\n- Trend: AI’s impact on code messiness; need practical help\n\nStep 5C: Best hook direction:\nGo with [Problem/solution] for broadest resonance, but direct and actionable.\n\nFinal Hook:\n\"AI helps you move fast—but when is it OK to write \"messy\" code?\"\n\nStep 6: Draft of full post\nAI helps you move fast—but when is it OK to write “messy” code?\n\nTechnical debt sneaks up fast when you’re working at AI speed. Over the years, I’ve found a simple way to decide when to prioritize clean code (and when to just ship it):\n\nI ask myself 2 things:\n1️⃣ How comfortable am I with the language or library? If I know it well, I naturally write cleaner code. If not, I let myself move fast with quick-and-dirty prototypes.\n2️⃣ How many times will this project run? If it’s just once, who cares if it’s rough? If it’ll be part of something ongoing, I spend more time upfront making it sustainable.\n\nThis helps me avoid overengineering, but also prevents future headaches on projects that matter.\n\nHow do you decide when it's time to slow down and clean up your code?\n\nStep 7: Review Style, Voice, Flow\n- Tone is clear, friendly, actionable\n- No technical jargon/excess; two points are clear and grounded\n- No em dashes overuse (one in hook only)\n- Uses reader-facing questions and invites sharing\n- Bullets and spacing for scannability\n\nStep 8: Write final post",
  "final_post": "AI helps you move fast—but when is it OK to write \"messy\" code?\n\nTechnical debt sneaks up quickly when you’re coding at AI speed. I keep things simple with just 2 questions:\n\n1️⃣ How comfortable am I with the language or library? If it’s familiar, I naturally write cleaner code. If it’s new, I’m okay prototyping fast—even if it gets a little ugly.\n\n2️⃣ How many times will I need to run (or maintain) this project? If it’s a one-off script, quick and dirty is fine. If it’s recurring or part of a bigger system, I’m more disciplined upfront.\n\nThis framework helps me balance moving quickly with keeping future headaches to a minimum.\n\nHow do you decide when it’s time to slow down and clean up your code?"
}