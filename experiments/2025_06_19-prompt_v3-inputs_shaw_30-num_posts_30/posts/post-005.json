{
  "input": "By the end of this post you’ll be able to build your first AI agent",
  "writing_steps": "Step 1: Purpose & Audience\n- Purpose: Educate and empower readers to build their first AI agent, likely as part of Shaw's mission as an AI educator.\n- Audience: Beginners, aspiring AI engineers, and tech-curious entrepreneurs looking to get practical with AI agents.\n\nStep 2: Wireframe\n[Hook]\nBy the end of this post you’ll be able to build your first AI agent.\n\n[Body]\nQuick intro: Agents are the next evolution in AI—autonomous programs that can complete tasks, make decisions, and even interact with other software.\n\nWhat you'll need:\n- Python installed (any recent version is fine)\n- Access to an LLM (e.g., OpenAI API)\n- Some basic Python know-how (just enough to modify scripts)\n\n3 steps to your first agent:\n1. Choose a use-case: Email summarizer? Automatic to-do list creator? Pick something you actually want to automate.\n2. Set up a basic agent framework: There are open-source libraries like LangChain, crewAI, or Autogen that help you wire up LLMs to actions. Start with their example scripts.\n3. Run and test: Give your agent a prompt, let it do its thing, and observe the output. Iterate by tweaking prompts or adding new capabilities one at a time.\n\n[CTA/Question]\nWhat’s the first problem you’d want your agent to solve?\n\nStep 3: Body\nAgents are the next evolution in AI—autonomous programs that can execute tasks, make decisions, and interact with digital environments. Here’s how to get started without getting overwhelmed:\n\n- Prerequisites: Python installed, access to an LLM (OpenAI, etc.), and very basic Python skills.\n- Pick a simple, real-life use case you want to automate\n- Use an open-source agent framework. My go-to's: LangChain, crewAI, or Autogen. Clone their starter examples—they’ve done most of the heavy lifting.\n- Test, experiment, and iterate: Run the example, change the prompts, and watch what happens. You’ll learn fastest by tinkering.\n\nStep 4: CTA\nWhat’s the first problem you’d want your agent to solve?\n\nStep 5: Hook\nStep 5A: Brainstormed directions\n- [Direct promise] By the end of this post you’ll be able to build your first AI agent\n- [Problem/solution] Most people think building AI agents is complicated—here’s how to do it in an hour.\n- [Beginner-to-expert clarity] Building your first AI agent is easier than you think. Here’s how.\n- [Action-oriented] Stop reading about agents, start building: the simplest three-step roadmap.\n\nStep 5B: Notes\n- [Direct promise] Strong for this context; matches user input exactly.\n- [Problem/solution] Might resonate with people feeling overwhelmed.\n- [Beginner-to-expert clarity] Reframes as accessible for all.\n- [Action-oriented] Could motivate action, but we want to avoid hype.\n\nStep 5C: Best direction = [Direct promise]. Use user's own phrasing for highest relevance and accuracy.\n\nStep 6: Full Post Draft\nBy the end of this post you’ll be able to build your first AI agent.\n\nAgents are the next evolution in AI—autonomous programs that can execute tasks, make decisions, and interact with digital environments. Getting started is less intimidating than most think:\n\n- Install Python (if you haven’t already)\n- Get access to an LLM (OpenAI, etc.)\n- Pick a real use case to automate\n- Grab an open-source agent framework like LangChain, crewAI, or Autogen. Start by cloning an example from their documentation.\n- Run it and tinker with the prompts and workflow. Each small experiment helps you learn fast and make the agent your own.\n\nWhat’s the first problem you’d want your agent to solve?\n\nStep 7: Review for style, voice, and flow\n- No em dash overuse (just one, justified in the context)\n- Clear, stepwise, and grounded voice\n- Factual, not hype-driven; avoids motivational framing\n- Follows example post structure\n\nStep 8: Final Post\n\n[See below]\n",
  "final_post": "By the end of this post you’ll be able to build your first AI agent.\n\nAgents are the next evolution in AI—autonomous programs that can execute tasks, make decisions, and interact with digital environments. Getting started is less intimidating than most people think:\n\n- Install Python (if you haven’t already)\n- Get access to an LLM (like OpenAI)\n- Pick a real use case you want to automate\n- Grab an open-source agent framework: LangChain, crewAI, or Autogen. Start with a sample script from their docs—they’ve handled most of the heavy lifting.\n- Run the example, then experiment by adjusting prompts or adding new simple tasks. Each tweak teaches you what’s possible (and how to break things—always part of the process).\n\nWhat’s the first problem you’d want your agent to solve?"
}