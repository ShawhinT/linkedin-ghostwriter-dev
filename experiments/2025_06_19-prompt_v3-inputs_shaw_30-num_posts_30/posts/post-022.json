{
  "input": "Managing technical debt when coding with AI. 2 things I consider. 1) my experience with the lang/library and 2) how many times I need to run project.",
  "writing_steps": "Step 1: Purpose & Audience\n- Purpose: Educate about managing technical debt in AI-assisted coding projects, and share Shaw’s approach (focusing on factors he considers)\n- Audience: Technical peers (developers, AI engineers, solopreneurs) deciding how to code projects using AI, especially those balancing speed and future maintainability\n\nStep 2: Wireframe\n- Hook teasing that AI makes it easy to go fast, but technical debt is different with AI\n- List (briefly) Shaw’s 2 main considerations\n- Explain how each affects his coding decisions\n- Invite discussion: What else do people consider?\n\nStep 3: Body:\nAI tools make it easier to build fast, but even with AI, technical debt is real. There are two main things I consider before shortcutting bigger design decisions:\n\n1. My experience with the programming language/library.\n   - If I'm already familiar, a quick-and-dirty approach isn't too risky because I can refactor or debug later. But if it’s unfamiliar, messy code can become a nightmare.\n2. How many times I need to run the project/code.\n   - If it’s a one-off or proof-of-concept, I’ll gladly “hack” something together. But if I know I’ll need to rerun, maintain, or scale, I invest more upfront in clean structure.\n\nStep 4: CTA\nWhat other factors do you consider when managing technical debt with AI code?\n\nStep 5A: Brainstorm Hook Directions\n1. [Problem/solution] “AI lets you build fast, but speed creates new challenges with technical debt”\n2. [Beginner-to-expert] “Most people overlook technical debt when using AI tools”\n3. [List/framework] “2 key things I think about before taking shortcuts”\n4. [Direct/observational] “Here’s my quick framework for managing technical debt with AI projects”\n\nStep 5B: Notes\n1. [Problem/solution] : AI’s speed → more debt risk; but you can manage it\n2. [Beginner-to-expert] : Beginners go fast, experts plan for debt\n3. [List] : 2 simple things; be systematic\n4. [Direct] : “Quick” framework = approachable, peer tone\n\nStep 5C: Choose strongest — [Problem/solution]: Speed and technical debt\nHook: “AI makes it easier to go fast—but it also makes it easier to rack up technical debt.”\n\nStep 6: Full Draft\nAI makes it easier to go fast—but it also makes it easier to rack up technical debt.\n\nHere are the two things I consider every time I’m deciding how much to “hack” vs invest in clean code with AI:\n\n1. My experience with the programming language or library.\n   - If I know it well, it’s easy to clean up later. If not, messy code is a potential trap.\n\n2. How many times I’ll need to run or maintain the project.\n   - For a one-off or quick prototype, shortcuts are fine. For anything I’ll rely on, I put in extra care upfront.\n\nWith AI, it’s tempting to always choose speed. But thinking through these two factors helps me avoid headaches later.\n\nWhat other factors do you consider when managing technical debt in your AI projects?\n\nStep 7: Review for Style, Voice, Flow\n- No repeated em dashes, or rhetorical question opener\n- Approachable, factual, shares brief personal “decision framework”\n- Uses white space for clarity, a simple list, and closes with a single question\n\nStep 8: Write Final Post",
  "final_post": "AI makes it easier to go fast—but it also makes it easier to rack up technical debt.\n\nWhenever I’m deciding how much to “hack” vs invest in clean code with AI, I focus on two things:\n\n1. My experience with the programming language or library.\n   - If I know it well, cleaning up later is easy. If not, messy code can become a real headache.\n\n2. How many times I’ll need to run or maintain the project.\n   - For a one-off or a prototype, shortcuts are fine. But if it’s something I’ll rely on repeatedly, I put in extra care upfront.\n\nWith AI, it’s tempting to always choose speed. But thinking through these two factors helps me avoid problems down the road.\n\nWhat other factors do you consider when managing technical debt in your AI projects?"
}