{
  "input": "Managing technical debt when coding with AI. 2 things I consider. 1) my experience with the lang/library and 2) how many times I need to run project.",
  "writing_steps": "Step 1: \n- Purpose: Educate other AI developers and engineers about how to practically manage technical debt when coding with AI tools.\n- Target audience: Developers, engineers, and technical founders building with AI (especially those working solo or on early-stage teams).\n\nStep 2: \n- Wireframe:\n[Clear, engaging hook: Frame technical debt as a common but manageable factor for AI builders.]\n[Meat: The 2 main criteria used to evaluate technical debt when building with AI: familiarity with the tool, and frequency of project runs. For each, explain why it matters.]\n[CTA: Ask for other practical checks people use in their workflow.]\n\nStep 3: Body\nManaging technical debt is a constant tradeoff, especially when you're moving fast with AI projects. I only use two main checks before deciding how much debt to take on:\n\n1) My experience with the language or library\nIf I'm familiar with the stack, it's easier to ship faster and fix issues later. If not, technical debt slows me down and adds hidden costs.\n\n2) How many times I need to run the project\nIf it's a one-off or a quick experiment, I'm less concerned about messy code. But if I know I'll rerun or maintain the project, I prioritize clarity and maintainability from the start.\n\nStep 4: CTA\nWhat’s your go-to check for managing technical debt in your AI projects?\n\nStep 5: Hook Directions\n- [Problem/solution] “Managing technical debt can stall AI projects—here are two simple checks I use.”\n- [Beginner-to-expert clarity] “Most forget these two factors when thinking about technical debt in AI projects.”\n- [Practical tip] “Before shipping an AI project, I pause and ask myself two questions.”\n- [User’s own phrasing] “Managing technical debt when coding with AI. 2 things I consider.”\n\nStep 5B: Short notes per direction\n- [Problem/solution] Frame the real challenge—fast-moving code piles up debt, but simple checks help.\n- [Beginner-to-expert clarity] Most overengineer early; this approach saves you time.\n- [Practical tip] The core checklist anyone can use.\n- [User’s own phrasing] Direct and factual intro sentence, very literal.\n\nStep 5C: Choose final hook\n- I’ll use the [Problem/solution] angle for specificity and immediate relevance: “Managing technical debt can stall AI projects—these are my two checks before I start coding.”\n\nStep 6: Draft of full post\nManaging technical debt can stall AI projects—these are my two checks before I start coding.\n\nWhen I’m building with AI, I always pause to consider:\n\n1) My experience with the language or library. If I know the stack, quick fixes are easy and debt isn’t as risky. If it’s new to me, extra debt means more pain later.\n\n2) How many times I’ll need to run the code. For one-offs or small experiments, messy scripts work. But if I’ll rerun or maintain it, I have to keep things clean from the beginning.\n\nWhat’s your go-to check for managing technical debt in your AI projects?\n\nStep 7: Review\n- No business clichés, idioms, or hype.\n- Only one em dash in the hook.\n- Clear, factual, white space and bullets.\n- Direct CTA, practical and focused.\n- Matches factual examples in Shaw’s voice.\n\nStep 8: Write final post.",
  "final_post": "Managing technical debt can stall AI projects—these are my two checks before I start coding.\n\nWhen I’m building with AI, I always pause to consider:\n\n1) My experience with the language or library. If I know the stack, quick fixes are easy and debt isn’t as risky. If it’s new to me, extra debt means more pain later.\n\n2) How many times I’ll need to run the code. For one-offs or small experiments, messy scripts work. But if I’ll rerun or maintain it, I have to keep things clean from the beginning.\n\nWhat’s your go-to check for managing technical debt in your AI projects?"
}